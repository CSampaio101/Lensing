import numpy as np
import matplotlib.pyplot as plt

# Parameters (replace with actual values as needed)
phi_11 = 1
phi_22 = 0
phi_111 = 1
phi_112 = 2
phi_122 = 2
phi_222 = 1

C = phi_111 / 2 - phi_122 * phi_112 / phi_222 + phi_122 ** 3 / (2 * phi_222 ** 2)
B = phi_112 / 2 - phi_122 ** 2 / (2 * phi_222)

def lens_mapping(x1, x2, phi_11, phi_22, phi_111, phi_112, phi_122, phi_222):
    y1 = 0.5 * x1 ** 2 * phi_111 + x1 * x2 * phi_112 + x1 * phi_11 + 0.5 * x2 ** 2 * phi_122
    y2 = 0.5 * x1 ** 2 * phi_112 + x1 * x2 * phi_122 + 0.5 * x2 ** 2 * phi_222 + x2 * phi_22
    return y1, y2

# Magnification map setup
ny = 401
yl = 2.0
raypix = 15.0
sqrpix = np.sqrt(raypix)
ys = 2.0 * yl / (ny - 1)
xs = ys / sqrpix
xl = 2.0 * yl
nx = int(np.round(2 * xl / xs)) + 1
x, y = np.mgrid[-xl:xl:nx*1j, -xl:xl:nx*1j]

# Calculate the lens mapping using the Taylor expansion
y1, y2 = lens_mapping(x, y, phi_11, phi_22, phi_111, phi_112, phi_122, phi_222)

# Calculate source plane coordinates
i1 = np.rint((y1 + yl) / ys).astype(int)
i2 = np.rint((yl - y2) / ys).astype(int)

# Initialize magnification map
b = np.zeros((ny, ny))

# Ensure indices are within bounds
ind = (i1 >= 0) & (i1 < ny) & (i2 >= 0) & (i2 < ny)
i1 = i1[ind]
i2 = i2[ind]

# Populate the magnification map using area ratio technique
np.add.at(b, (i2, i1), 1)

# Normalize the magnification map
b /= raypix

# Plot the magnification map on the image plane
plt.figure(figsize=(8, 8))
plt.imshow(b, vmin=0, vmax=15, extent=(-yl, yl, -yl, yl), cmap='hot')
plt.colorbar(label='Magnification')
plt.title('Magnification Map on Image Plane')
plt.xlabel('x')
plt.ylabel('y')
plt.show()

# Plot the source plane
plt.figure(figsize=(8, 8))
plt.scatter(y1[ind], y2[ind], s=1, color='blue')
plt.title("Source Plane")
plt.xlabel("y1")
plt.ylabel("y2")
plt.show()

# Calculate the determinant of the Jacobian for caustic curve
def compute_determinant_jacobian(x1, x2):
    A11 = x1 * phi_111 + x2 * phi_112 + phi_11
    A12 = x1 * phi_112 + x2 * phi_122
    A21 = x1 * phi_112 + x2 * phi_122
    A22 = x1 * phi_122 + x2 * phi_222 + phi_22
    det_A = A11 * A22 - A12 * A21
    return det_A

determinant_A = compute_determinant_jacobian(x, y)

# Plot the caustic curve
plt.figure(figsize=(8, 8))
plt.contour(x, y, determinant_A, levels=[0], colors='r')
plt.imshow(b, vmin=0, vmax=15, extent=(-yl, yl, -yl, yl), cmap='hot', alpha=0.6)
plt.colorbar(label='Magnification')
plt.title('Magnification Map with Caustic Curve')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
